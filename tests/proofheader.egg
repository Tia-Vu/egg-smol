(datatype ProofList)
(datatype Ast)

;; There are two types of proofs:
;; 1) Provenance proofs justify the existance of a term 
;; 2) Equality proofs prove two terms are equal 
;; Equality proofs `a = b` also double as
;; provenance proofs `a` and `b`
;; When a proof `a = b` is used as a provenance proof, it is a proof of `b`
(datatype Proof
  ;; proves that a term exists in the database
  (Original Ast)
  ;; justifies the fact that a rule fired
  (Rule ProofList String)
  ;; using a rule justification,
  ;; proves a term exists
  (RuleTerm Proof Ast)
  ;; using a rule justification, proves two terms are equal
  (RuleEquality Proof Ast Ast)

  ;; given proofs for x1 = x2, x2 = x3, ..., xn = xn+1
  ;; proves that x1 = xn+1 and x1 and xn+1 exist
  (Transitivity ProofList)
  ;; given x1 = x2, proves x2 = x1
  (Flip Proof)
  ;; given a proof for a term t1, proves that t1 is equal
  ;; to another term t2 via equality proofs on their children
  (Congruence Proof ProofList)
  ;; a placeholder for a proof of equality between two
  ;; terms which can be proven equal using the graph
  ;; stored in the `Eq` relation
  (DemandEq Ast Ast :cost 10000000))

;; ProofList definitions
(function Cons (Proof ProofList) ProofList)
(function Null () ProofList)

;; prove two terms equal
(function EqGraph (Ast Ast) Proof  :cost 100000 :merge old)

(datatype TrmPrf
  (MakeTrmPrf Ast Proof))

;; get child terms, proofs, and child terms
(function TrmOf (TrmPrf) Ast :cost 10000)
(function PrfOf (TrmPrf) Proof :cost 100000)
(function Child1 (Ast) Ast :cost 100000)
(function Child2 (Ast) Ast :cost 100000)
