(datatype Math
    (Add Math Math)
    (Sub Math Math)
    (Const Rational)
    (Var String))

(rewrite (Add a b) (Add (Add a b) (Const (rational 0 1))))

(rewrite (Add a b) (Add b a))


(rewrite (Add a (Add b c))
      (Add (Add a b) c))

(define two (rational 2 1))
(define start1 (Add (Var "x") (Const two)))
;; add original proofs

(run 3)


(check (!= (Var "x") (Const two)))
(check (= (Add (Var "x") (Const two))
          (Add (Const two) (Var "x"))))

(declare p1 Proof__ :cost 100000)

(rule ((= (Add (Var "x") (Const two))
          (Add (Const two) (Var "x"))))
      ((union rule-proof p1)))

(run 1)


(run-schedule (saturate proof-extract__))
(extract p1)
